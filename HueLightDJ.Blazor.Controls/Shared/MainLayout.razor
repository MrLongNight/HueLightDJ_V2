@inherits LayoutComponentBase
@implements IDisposable
@using HueLightDJ.Blazor.Controls.Pages
@using HueLightDJ.Blazor.Controls.Services
@inject ThemeState ThemeState

<MudThemeProvider @ref="_themeProvider" Theme="ThemeState.CurrentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="1">
        @*<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />*@
        <MudText Typo="Typo.h5" Class="ml-3"><a href="/">HueLightDJ</a></MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
   @* <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>*@
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @*@Body*@
            <MudTabs Elevation="2" Rounded="true" Centered="true" PanelClass="mt-6">
                <MudTabPanel Text="Main">
                    <MainTabPage />
                </MudTabPanel>
                <MudTabPanel Text="Hue Configuration">
                    <HueConfigTabPage />
                </MudTabPanel>
                <MudTabPanel Text="General Settings">
                    <GeneralSettingsTabPage />
                </MudTabPanel>
            </MudTabs>

            @* @Body *@

            <br />
            <br />
            <br />
            <br />
            <hr />
            <footer>
                <p>&copy; 2018 - @DateTimeOffset.UtcNow.Year | Created by Michiel Post | GitHub: <a href="https://github.com/michielpost/HueLightDJ" target="_blank">HueLightDJ</a></p>
            </footer>
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    private MudThemeProvider _themeProvider = null!;
    bool _drawerOpen = true; // Keep this if it's used, or remove if not.

    void DrawerToggle() // Keep this if it's used, or remove if not.
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized(); // Good practice to call base.
        ThemeState.OnThemeChanged += ApplyTheme;
    }

    void ApplyTheme()
    {
        // This is called when the theme changes in ThemeState.
        // The MudThemeProvider's Theme parameter is already bound to ThemeState.CurrentTheme,
        // so MudBlazor should reactively update.
        // If direct manipulation of _themeProvider is needed, it can be done here.
        // Forcing a StateHasChanged on the layout might be necessary if changes don't propagate.
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeState.OnThemeChanged -= ApplyTheme;
    }
}
