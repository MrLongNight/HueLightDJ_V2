@model List<GroupConfiguration>
@{
  ViewData["Title"] = "Hue Light DJ";
}

<div id="vuedj">

  <div class="container">
    <div class="row">
      <div class="col-sm" v-show="status.groupNames == null">
        <h3>Loading...</h3>
      </div>
      <div class="col-sm" v-show="status.groupNames != null" style="display:none">
          <input v-for="(item, index) in status.groupNames" :key="index" type="button" :value="'Connect ' + item" v-show="effects.groups == null" v-on:click="connect(item)" class="btn btn-dark" />
          <span  v-show="status.currentGroup != null">Connected to {{status.currentGroup}}</span>
        @if (ViewBag.IsAdmin)
        {
          <input type="button" value="Disconnect" v-on:click="disconnect" class="btn btn-danger" />
        }
        else
        {
          <input type="button" value="Disconnect" v-show="status.showDisconnect" v-on:click="disconnect" class="btn btn-danger" />
        }
      </div>
    </div>
      <div class="row">
        <div class="col-12">
          <hr />
        </div>
      </div>
      <div class="row">
        <div class="col-sm">
          <div id="messagesList" class="form-control bg-dark" style="width:100%;max-height:85px;overflow-y: scroll;"></div>
        </div>
      </div>
    </div>





  <hr style="margin-bottom:20px;" />

  <div class="container" id="effects" v-show="effects.groups != null" style="display:none;">
    <div class="row">
      <div class="col-sm">
        <h3>BPM</h3>
        <div class="btn-group">
          <button v-on:click="increaseBPM(-5)" class="btn btn-dark" v-on:keyup.d="alert('hi')">--</button>
          <button v-on:click="increaseBPM(-1)" class="btn btn-dark">-</button>
          <p id="bpm">{{status.bpm}}</p>
          <button v-on:click="increaseBPM(1)" class="btn btn-dark">+</button>
          <button v-on:click="increaseBPM(5)" class="btn btn-dark">++</button>
        </div>
        <br />
        <br />

        <div class="btn-group">
          <button v-on:click="setBPM(120)" class="btn btn-dark">reset bpm</button>
          <button v-on:click="setBPM(20)" class="btn btn-dark">slow</button>
          <button v-on:click="setBPM(400)" class="btn btn-dark">quick</button>
          <button v-on:click="setBPM(600)" class="btn btn-dark">super quick</button>
        </div>

        <br />
        <br />
        <div class="btn-group-vertical">
          <button v-on:click="startRandom" class="btn btn-dark" title="Shortcut: R">random effect</button>

          <div class="btn-group">
            <button v-on:click="startAutoMode" v-show="status.isAutoMode == false" class="btn btn-dark">start auto mode</button>
            <button v-on:click="stopAutoMode" v-show="status.isAutoMode == true" class="btn btn-dark">stop auto mode</button>

            <button v-on:click="toggleAutoRandomMode" v-show="status.isAutoMode == true && status.autoModeHasRandomEffects == false" class="btn btn-dark">generate random groups and effects</button>
            <button v-on:click="toggleAutoRandomMode" v-show="status.isAutoMode == true && status.autoModeHasRandomEffects == true" class="btn btn-dark">only predefined effects</button>

          </div>
          <button v-on:click="stopEffects" class="btn btn-dark">stop all effects</button>
          <button v-on:click="beat" class="btn btn-dark">beat</button>
          @*<button v-on:click="setColors" class="btn btn-dark">setColors</button>*@
        </div>

        <br />
        <br />
        <div>
          <span title="Shortcut: W / S / X">Brightness:</span> <br />
          <input title="Shortcut: W / S / X" type="range" min="0" max="100" value="100" style="width:400px" class="form-control" oninput="setBri(Math.abs((this.value/100) - 1))" id="briRange">
        </div>
      </div>
      <div class="col-sm">
        <div id="pixiPreview" style="width:402px;margin:5px;"></div>
        @Html.ActionLink("Full Screen Preview", "Preview", null, null, new { target = "_blank" })
        <br />
      </div>
    </div>

    <div class="row">


      <div class="col-sm">
        <h3>Long Running</h3>
        <div id="baseEffects" class="btn-group-vertical">
          <div v-for="(value, key) in effects.baseEffects">
            <h3>{{key}}</h3>
            <label v-for="(item, index) in value" class="btn-group">
              <span v-show="item.hasColorPicker" class="btn btn-dark">
                color (random): <input type="checkbox" v-model="item.isRandom" />
                <input type="color" v-model="item.color" v-show="!item.isRandom" />
              </span>
              <button v-on:click="start(item)" class="btn btn-dark" :title="'Shortcut: F' + (index+1)">
                {{ item.name }}
              </button>
            </label>
          </div>
        </div>
      </div>

      <div class="col-sm">
        <h3>Short Effects</h3>
        <div id="shortEffects" class="btn-group-vertical">
          <label v-for="(item, index) in effects.shortEffects" class="btn-group">
            <span v-show="item.hasColorPicker" class="btn btn-dark">
              color (random): <input type="checkbox" v-model="item.isRandom" />
              <input type="color" v-model="item.color" v-show="!item.isRandom" />
            </span>
            <button v-on:click="start(item)" class="btn btn-dark" :title="'Shortcut: ' + (index+1)">
              {{ item.name }}
            </button>
          </label>
        </div>

      </div>
    </div>

    <div class="row">
      <div class="col-sm" style="margin-bottom:20px;">
        <hr />
      </div>
    </div>

    <div class="row">
      <div class="col-sm">
        <h3>Groups</h3>
        <div id="groups" class="btn-group-vertical btn-group-toggle" data-toggle="buttons">
          <label class="btn btn-secondary" v-for="item in effects.groups" :class="groupPicked == item.name ? 'active': ''">
            <input type="radio" class="radio-button" :value="item.name" name="groupPicked" v-model="groupPicked" v-model.number="groupPicked"> {{ item.name }}
          </label>
        </div>
      </div>
      <div class="col-sm">

        <h3>IteratorModes</h3>
        <div id="iteratorModes" class="btn-group-vertical btn-group-toggle" data-toggle="buttons">
          <label v-for="item in effects.iteratorModes" class="btn btn-secondary" :class="iteratorPicked == item ? 'active': ''">
            <input type="radio" class="radio-button" :value="item" name="iteratorPicked" v-model="iteratorPicked" v-model.number="iteratorPicked"> {{ item }}
          </label>
        </div>
      </div>
      <div class="col-sm">

        <h3>Secondary IteratorModes</h3>
        <div id="secondaryIteratorModes" class="btn-group-vertical btn-group-toggle" data-toggle="buttons">
          <label v-for="item in effects.secondaryIteratorModes" class="btn btn-secondary" :class="secondaryIteratorPicked == item ? 'active': ''">
            <input type="radio" class="radio-button" :value="item" name="secondaryIteratorPicked" v-model="secondaryIteratorPicked" v-model.number="secondaryIteratorPicked">  {{ item }}
          </label>
        </div>
      </div>
      <div class="col-sm">

        <h3>Group Effects</h3>
        <div id="groupEffects" class="btn-group-vertical">
          <div v-for="item in effects.groupEffects" class="btn-group">
            <span v-show="item.hasColorPicker" class="btn btn-dark">
              color (random): <input type="checkbox" v-model="item.isRandom" />
              <input type="color" v-model="item.color" v-show="!item.isRandom" />
            </span>
            <button class="btn btn-dark" :disabled="composerFilled == false" v-on:click="startGroup(item, groupPicked, iteratorPicked, secondaryIteratorPicked)">
              {{ item.name }}
            </button>
          </div>
        </div>
      </div>

    </div>
  </div>
    <div class="container">
        <p><a href="Setup" target="_blank">Setup Wizard</a> <br />
            <a href="Configure" target="_blank">Configure light positions helper</a> <br />
        <a href="Preview" target="_blank">Full screen preview</a></p>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="~/lib/signalr/dist//browser/signalr.js"></script>
<script src="~/js/mousetrap.min.js"></script>
<script src="~/js/mousetrap-global-bind.min.js"></script>

<script src="~/js/pixi.min.js"></script>
<script src="~/js/pixi-layers.js"></script>
<script src="~/js/preview.js"></script>

<script src="~/js/status.js"></script>

<script>
  renderPreviewGrid(400);
</script>
